class TaskManager {
    constructor() {
        this.socket = null;
        this.currentTaskList = null;
        this.currentTaskListName = '';
        this.isAuthenticated = false;
        this.init();
    }

    init() {
        this.bindEvents();
        this.checkAuthentication();
        this.showSection('task-lists-section');
    }

    bindEvents() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.handleNavigation(e));
        });

        // –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        document.getElementById('create-task-list-btn')?.addEventListener('click',
            () => this.showCreateTaskListForm());
        document.getElementById('create-task-btn')?.addEventListener('click',
            () => this.showCreateTaskForm());

        // –§–æ—Ä–º—ã
        document.getElementById('task-list-form')?.addEventListener('submit',
            (e) => this.createTaskList(e));
        document.getElementById('task-form')?.addEventListener('submit',
            (e) => this.createTask(e));

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        document.getElementById('login-btn')?.addEventListener('click',
            () => this.showLoginForm());
        document.getElementById('logout-btn')?.addEventListener('click',
            () => this.logout());
    }

    async checkAuthentication() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–∑–∞–≥–ª—É—à–∫–∞)
        this.isAuthenticated = false; // –í—Ä–µ–º–µ–Ω–Ω–æ false –¥–ª—è –¥–µ–º–æ
        this.updateAuthUI();

        if (this.isAuthenticated) {
            await this.loadTaskLists();
        }
    }

    updateAuthUI() {
        const loginBtn = document.getElementById('login-btn');
        const logoutBtn = document.getElementById('logout-btn');
        const usernameSpan = document.getElementById('username');

        if (this.isAuthenticated) {
            loginBtn.style.display = 'none';
            logoutBtn.style.display = 'inline-block';
            usernameSpan.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        } else {
            loginBtn.style.display = 'inline-block';
            logoutBtn.style.display = 'none';
            usernameSpan.textContent = '–ì–æ—Å—Ç—å';
        }
    }

    handleNavigation(e) {
        const targetSection = e.target.dataset.section;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        e.target.classList.add('active');

        this.showSection(targetSection);
    }

    showSection(sectionId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.add('hidden');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.remove('hidden');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏
        if (sectionId === 'task-lists-section' && this.isAuthenticated) {
            this.loadTaskLists();
        } else if (sectionId === 'notifications-section' && this.isAuthenticated) {
            this.loadNotifications();
        }
    }

    async loadTaskLists() {
        if (!this.isAuthenticated) {
            this.showLoginPrompt();
            return;
        }

        try {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            const mockTaskLists = [
                {
                    id: 1,
                    name: '–†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏',
                    description: '–ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞–±–æ—Ç–µ',
                    tasks_count: 3,
                    members_count: 2
                },
                {
                    id: 2,
                    name: '–õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏',
                    description: '–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞',
                    tasks_count: 1,
                    members_count: 1
                }
            ];

            this.renderTaskLists(mockTaskLists);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á');
        }
    }

    renderTaskLists(taskLists) {
        const container = document.getElementById('task-lists-container');
        if (!container) return;

        if (taskLists.length === 0) {
            container.innerHTML = '<p class="empty-state">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á</p>';
            return;
        }

        container.innerHTML = taskLists.map(list => `
            <div class="task-list-card" data-list-id="${list.id}">
                <h3>${list.name}</h3>
                <p class="task-list-description">${list.description || ''}</p>
                <div class="task-list-meta">
                    <span>üìã –ó–∞–¥–∞—á: ${list.tasks_count || 0}</span>
                    <span>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${list.members_count || 1}</span>
                </div>
                <div class="task-actions">
                    <button class="btn btn-primary" onclick="taskManager.selectTaskList(${list.id}, '${list.name}')">
                        –û—Ç–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    selectTaskList(listId, listName) {
        this.currentTaskList = listId;
        this.currentTaskListName = listName;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        document.getElementById('current-list-name').textContent = `üìã –ó–∞–¥–∞—á–∏: ${listName}`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∑–∞–¥–∞—á
        this.showSection('tasks-section');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        this.loadTasks(listId);
    }

    async loadTasks(listId) {
        if (!this.isAuthenticated) {
            this.showLoginPrompt();
            return;
        }

        try {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            const mockTasks = [
                {
                    id: 1,
                    title: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç',
                    description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ CreatingTasks',
                    status: 'in_progress',
                    priority: 'high',
                    due_date: '2025-10-10T18:00:00',
                    assigned_to: { username: '–í—ã' },
                    is_overdue: false
                },
                {
                    id: 2,
                    title: '–ù–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
                    description: '–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è API',
                    status: 'pending',
                    priority: 'medium',
                    due_date: '2025-10-08T12:00:00',
                    assigned_to: { username: '–í—ã' },
                    is_overdue: true
                }
            ];

            this.renderTasks(mockTasks);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏');
        }
    }

    renderTasks(tasks) {
        const container = document.getElementById('tasks-container');
        if (!container) return;

        if (tasks.length === 0) {
            container.innerHTML = '<p class="empty-state">–í —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á</p>';
            return;
        }

        container.innerHTML = tasks.map(task => this.createTaskHTML(task)).join('');
    }

    createTaskHTML(task) {
        const dueDate = task.due_date ? new Date(task.due_date).toLocaleDateString('ru-RU') : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        const isOverdue = task.is_overdue ? 'overdue' : '';

        return `
            <div class="task-card ${isOverdue}" data-task-id="${task.id}">
                <div class="task-header">
                    <h4>${task.title}</h4>
                    <span class="task-priority ${task.priority}">${this.getPriorityText(task.priority)}</span>
                </div>
                <p class="task-description">${task.description || ''}</p>
                <div class="task-meta">
                    <span>üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assigned_to?.username || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</span>
                    <span>üìÖ –°—Ä–æ–∫: ${dueDate}</span>
                    <span>üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusText(task.status)}</span>
                </div>
                <div class="task-actions">
                    ${task.status !== 'completed' ?
                        `<button class="btn btn-success" onclick="taskManager.completeTask(${task.id})">
                            ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
                        </button>` : ''
                    }
                    <button class="btn btn-secondary" onclick="taskManager.showTaskDetails(${task.id})">
                        üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                    </button>
                </div>
            </div>
        `;
    }

    getPriorityText(priority) {
        const priorities = {
            'low': 'üîµ –ù–∏–∑–∫–∏–π',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
            'high': 'üü† –í—ã—Å–æ–∫–∏–π',
            'urgent': 'üî¥ –°—Ä–æ—á–Ω—ã–π'
        };
        return priorities[priority] || priority;
    }

    getStatusText(status) {
        const statuses = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
            'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
        };
        return statuses[status] || status;
    }

    showCreateTaskListForm() {
        if (!this.isAuthenticated) {
            this.showLoginPrompt();
            return;
        }
        this.showModal('create-task-list-modal');
    }

    showCreateTaskForm() {
        if (!this.isAuthenticated) {
            this.showLoginPrompt();
            return;
        }
        this.showModal('create-task-modal');
    }

    async createTaskList(e) {
        e.preventDefault();
        const formData = new FormData(e.target);

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:', {
            name: formData.get('name'),
            description: formData.get('description')
        });

        this.hideModal('create-task-list-modal');
        e.target.reset();
        this.showSuccess('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω!');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏
        await this.loadTaskLists();
    }

    async createTask(e) {
        e.preventDefault();
        const formData = new FormData(e.target);

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', {
            title: formData.get('title'),
            description: formData.get('description'),
            priority: formData.get('priority'),
            due_date: formData.get('due_date')
        });

        this.hideModal('create-task-modal');
        e.target.reset();
        this.showSuccess('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        if (this.currentTaskList) {
            await this.loadTasks(this.currentTaskList);
        }
    }

    async completeTask(taskId) {
        if (!this.isAuthenticated) {
            this.showLoginPrompt();
            return;
        }

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', taskId);
        this.showSuccess('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        if (this.currentTaskList) {
            await this.loadTasks(this.currentTaskList);
        }
    }

    showTaskDetails(taskId) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        alert(`–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ #${taskId}\n\n–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ.`);
    }

    showLoginForm() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        alert('–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞\n\n–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞.');
    }

    logout() {
        this.isAuthenticated = false;
        this.updateAuthUI();
        this.showSection('task-lists-section');
        this.showSuccess('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }

    showModal(modalId) {
        document.getElementById(modalId)?.classList.remove('hidden');
    }

    hideModal(modalId) {
        document.getElementById(modalId)?.classList.add('hidden');
    }

    showLoginPrompt() {
        this.showError('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <p>${message}</p>
            </div>
        `;

        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'error' ? '#f8d7da' : type === 'success' ? '#d1edff' : '#fff3cd'};
            border: 1px solid ${type === 'error' ? '#f5c6cb' : type === 'success' ? '#b8daff' : '#ffeaa7'};
            color: ${type === 'error' ? '#721c24' : type === 'success' ? '#155724' : '#856404'};
            padding: 1rem;
            border-radius: 5px;
            z-index: 10000;
            max-width: 300px;
        `;

        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 5000);
    }

    loadNotifications() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const mockNotifications = [
            {
                id: 1,
                title: '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
                message: '–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"',
                is_read: false,
                created_at: new Date().toISOString()
            },
            {
                id: 2,
                title: '–°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç',
                message: '–ó–∞–¥–∞—á–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é" –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
                is_read: true,
                created_at: new Date(Date.now() - 3600000).toISOString()
            }
        ];

        this.renderNotifications(mockNotifications);
    }

    renderNotifications(notifications) {
        const container = document.getElementById('notifications-container');
        if (!container) return;

        if (notifications.length === 0) {
            container.innerHTML = '<p class="empty-state">–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
            return;
        }

        container.innerHTML = notifications.map(notification => `
            <div class="notification ${notification.is_read ? '' : 'unread'}">
                <div class="notification-content">
                    <h4>${notification.title}</h4>
                    <p>${notification.message}</p>
                    <div class="notification-time">
                        ${new Date(notification.created_at).toLocaleString('ru-RU')}
                    </div>
                </div>
            </div>
        `).join('');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const taskManager = new TaskManager();